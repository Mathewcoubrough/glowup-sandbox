name: iOS App Store build & upload (Apple ID, DEBUG)

on:
  workflow_dispatch:

jobs:
  build-upload:
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Ensure Capacitor app files
        run: |
          set -euxo pipefail
          test -f package.json || echo '{ "name":"glowup","version":"1.0.0","private":true }' > package.json
          test -f capacitor.config.json || cat > capacitor.config.json <<EOF
          { "appId": "DUMMY.REPLACED.LATER", "appName": "GlowUp Money", "webDir": "web", "bundledWebRuntime": false }
          EOF
          mkdir -p web build
          test -f web/index.html || echo '<!doctype html><title>GlowUp</title><body>Build</body>' > web/index.html

      - name: Install Capacitor toolchain
        run: |
          set -euxo pipefail
          npm i -D @capacitor/cli @capacitor/core @capacitor/ios

      - name: Add & sync iOS
        run: |
          set -euxo pipefail
          npx cap add ios || true
          npx cap sync ios
          ls -la ios || true
          ls -la ios/App || true

      - name: Install CocoaPods (CDN)
        run: |
          set -euxo pipefail
          if ! command -v pod >/dev/null 2>&1; then sudo gem install cocoapods -NV; fi
          cd ios/App
          if [ -f Podfile ]; then
            grep -q "cdn.cocoapods.org" Podfile || (echo "source 'https://cdn.cocoapods.org/'" | cat - Podfile > Podfile.tmp && mv Podfile.tmp Podfile)
            grep -q "platform :ios" Podfile || echo "platform :ios, '13.0'" >> Podfile
          else
            printf "source 'https://cdn.cocoapods.org/'\nplatform :ios, '13.0'\nuse_frameworks!\n" > Podfile
            cat >> Podfile <<'PODS'
            target 'App' do
              pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
              pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
            end
            PODS
          fi
          pod install --no-repo-update --verbose
          cd ../..

      - name: Import signing assets
        env:
          IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          IOS_CERT_PASSWORD:   ${{ secrets.IOS_CERT_PASSWORD }}
          IOS_PROFILE_BASE64:  ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          set -euxo pipefail
          echo "$IOS_CERT_P12_BASE64" | base64 --decode > signing.p12
          echo "$IOS_PROFILE_BASE64"  | base64 --decode > profile.mobileprovision

          KEYCHAIN=build.keychain-db
          PASS=secret123
          security create-keychain -p "$PASS" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$PASS" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$PASS" "$KEYCHAIN"
          security import signing.p12 -k "$KEYCHAIN" -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security list-keychains -d user -s "$KEYCHAIN" login.keychain-db
          security find-identity -v -p codesigning "$KEYCHAIN" || true

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          cp profile.mobileprovision "$PROFILE_PATH"

          PROFILE_PLIST="$(security cms -D -i "$PROFILE_PATH")"
          echo "$PROFILE_PLIST" > build/profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$PROFILE_PLIST")
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$PROFILE_PLIST")
          APPID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<< "$PROFILE_PLIST" || true)
          TEAMINPROF=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST" || true)
          echo "Profile name: $NAME"
          echo "Profile UUID: $UUID"
          echo "Profile application-identifier: $APPID"
          echo "Profile TeamIdentifier[0]: $TEAMINPROF"

          # Derive bundle id from the profile (APPID is TEAMID.bundleid)
          BUNDLE_FROM_PROF="${APPID#*.}"
          echo "APP_BUNDLE_ID=$BUNDLE_FROM_PROF" >> $GITHUB_ENV
          echo "Effective APP_BUNDLE_ID: $BUNDLE_FROM_PROF"

      - name: Show Xcode setup / schemes
        run: |
          set -euxo pipefail
          xcodebuild -version
          xcodebuild -showsdks
          xcodebuild -list -workspace ios/App/App.xcworkspace | tee build/xcodebuild-list.txt || true
          xcodebuild -list -project ios/App/App.xcodeproj | tee -a build/xcodebuild-list.txt || true

      - name: Set build number
        env:
          NUM: ${{ github.run_number }}
        run: |
          set -euxo pipefail
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NUM" ios/App/App/Info.plist || true
          /usr/libexec/PlistBuddy -c "Print" ios/App/App/Info.plist | sed -n '1,120p' || true

      - name: Archive (Release)
        run: |
          set -euxo pipefail
          echo "Using APP_BUNDLE_ID: ${APP_BUNDLE_ID}"
          FLAGS="CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER=${PROFILE_NAME} PROVISIONING_PROFILE=${UUID} PRODUCT_BUNDLE_IDENTIFIER=${APP_BUNDLE_ID} OTHER_CODE_SIGN_FLAGS=--keychain\ build.keychain-db"
          if [ -f "ios/App/App.xcworkspace" ]; then
            xcodebuild -workspace ios/App/App.xcworkspace -scheme App -configuration Release -destination 'generic/platform=iOS' $FLAGS -archivePath $PWD/build/App.xcarchive clean archive | tee build/xcodebuild-archive.log
          else
            xcodebuild -project ios/App/App.xcodeproj     -scheme App -configuration Release -destination 'generic/platform=iOS' $FLAGS -archivePath $PWD/build/App.xcarchive clean archive | tee build/xcodebuild-archive.log
          fi

      - name: Export IPA (App Store)
        run: |
          set -euxo pipefail
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${APP_BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict></plist>
          EOF
          xcodebuild -exportArchive -archivePath $PWD/build/App.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $PWD/build | tee build/xcodebuild-export.log
          ls -la build || true

      - name: Upload to TestFlight (Apple ID auth)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          set -euxo pipefail
          sudo gem install fastlane -NV
          IPA=$(ls build/*.ipa | head -n1)
          echo "Uploading IPA: $IPA for bundle: $APP_BUNDLE_ID"
          fastlane deliver --verbose \
            --username "$APPLE_ID" \
            --ipa "$IPA" \
            --app_identifier "$APP_BUNDLE_ID" \
            --skip_screenshots true \
            --skip_metadata true \
            --force true

      - name: Upload debug logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-logs
          path: |
            build/**
            ExportOptions.plist
            ios/App/App/Info.plist
